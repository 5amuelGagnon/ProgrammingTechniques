
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main {
	private static CoffeeMaker coffeeMaker;

	/**
	 * Prints the main menu and handles user input for main menu commands.
	 */
	public static void mainMenu() {
		System.out.println("1. Add a recipe");
		System.out.println("2. Delete a recipe");
		System.out.println("3. Edit a recipe");
		System.out.println("4. Add inventory");
		System.out.println("5. Check inventory");
		System.out.println("6. Make coffee");
		System.out.println("0. Exit\n");

		// Get user input
		try {
			int userInput = Integer.parseInt(inputOutput(
					"Please press the number that corresponds to what you would like the coffee maker to do."));

			if (userInput >= 0 && userInput <= 6) {
				if (userInput == 1)
					addRecipe();
				if (userInput == 2)
					deleteRecipe();
				if (userInput == 3)
					editRecipe();
				if (userInput == 4)
					addInventory();
				if (userInput == 5)
					checkInventory();
				if (userInput == 6)
					makeCoffee();
				if (userInput == 0)
					System.exit(0);
			} else {
				System.out.println("Please enter a number from 0 - 6");
				mainMenu();
			}
		} catch (NumberFormatException e) {
			System.out.println("Please enter a number from 0 - 6");
			mainMenu();
		}
	}

	/**
	 * The add recipe user interface that process user input.
	 */
	public static void addRecipe() {

		// Read in recipe name
		String name = inputOutput("\nPlease enter the recipe name: ");

		// Read in recipe price
		String priceString = inputOutput("\nPlease enter the recipe price: $");

		// Read in amt coffee
		String coffeeString = inputOutput("\nPlease enter the units of coffee in the recipe: ");

		// Read in amt milk
		String milkString = inputOutput("\nPlease enter the units of milk in the recipe: ");

		// Read in amt sugar
		String sugarString = inputOutput("\nPlease enter the units of sugar in the recipe: ");

		// Read in amt chocolate
		String chocolateString = inputOutput("\nPlease enter the units of chocolate in the recipe: ");

		Recipe r = new Recipe();
		try {
			r.setName(name);
			r.setPrice(priceString);
			r.setAmtCoffee(coffeeString);
			r.setAmtMilk(milkString);
			r.setAmtSugar(sugarString);
			r.setAmtChocolate(chocolateString);

			boolean recipeAdded = coffeeMaker.addRecipe(r);

			if (recipeAdded) {
				System.out.println(name + " successfully added.\n");
			} else {
				System.out.println(name + " could not be added.\n");
			}
		} catch (RecipeException e) {
			System.out.println(e.getMessage());
		} finally {
			mainMenu();
		}
	}

	/**
	 * Delete recipe user interface that processes input.
	 */
	public static void deleteRecipe() {
		Recipe[] recipes = coffeeMaker.getRecipes();
		for (int i = 0; i < recipes.length; i++) {
			if (recipes[i] != null) {
				System.out.println((i + 1) + ". " + recipes[i].getName());
			}
		}
		int recipeToDelete = recipeListSelection("Please select the number of the recipe to delete.");

		if (recipeToDelete < 0) {
			mainMenu();
		}

		String recipeDeleted = coffeeMaker.deleteRecipe(recipeToDelete);

		if (recipeDeleted != null) {
			System.out.println(recipeDeleted + " successfully deleted.\n");
		} else {
			System.out.println("Selected recipe doesn't exist and could not be deleted.\n");
		}
		mainMenu();
	}

	/**
	 * Edit recipe user interface the processes user input.
	 */
	public static void editRecipe() {
		Recipe[] recipes = coffeeMaker.getRecipes();
		for (int i = 0; i < recipes.length; i++) {
			if (recipes[i] != null) {
				System.out.println((i + 1) + ". " + recipes[i].getName());
			}
		}
		int recipeToEdit = recipeListSelection("Please select the number of the recipe to edit.");

		if (recipeToEdit < 0) {
			mainMenu();
		}

		// Read in recipe price
		String priceString = inputOutput("\nPlease enter the recipe price: $");

		// Read in amt coffee
		String coffeeString = inputOutput("\nPlease enter the units of coffee in the recipe: ");

		// Read in amt milk
		String milkString = inputOutput("\nPlease enter the units of milk in the recipe: ");

		// Read in amt sugar
		String sugarString = inputOutput("\nPlease enter the units of sugar in the recipe: ");

		// Read in amt chocolate
		String chocolateString = inputOutput("\nPlease enter the units of chocolate in the recipe: ");

		Recipe newRecipe = new Recipe();
		try {
			newRecipe.setPrice(priceString);
			newRecipe.setAmtCoffee(coffeeString);
			newRecipe.setAmtMilk(milkString);
			newRecipe.setAmtSugar(sugarString);
			newRecipe.setAmtChocolate(chocolateString);

			String recipeEdited = coffeeMaker.editRecipe(recipeToEdit, newRecipe);

			if (recipeEdited != null) {
				System.out.println(recipeEdited + " successfully edited.\n");
			} else {
				System.out.println(recipeEdited + "could not be edited.\n");
			}
		} catch (RecipeException e) {
			System.out.println(e.getMessage());
		} finally {
			mainMenu();
		}
	}

	/**
	 * Add inventory user interface that processes input.
	 */
	public static void addInventory() {
		// Read in amt coffee
		String coffeeString = inputOutput("\nPlease enter the units of coffee to add: ");

		// Read in amt milk
		String milkString = inputOutput("\nPlease enter the units of milk to add: ");

		// Read in amt sugar
		String sugarString = inputOutput("\nPlease enter the units of sugar to add: ");

		// Read in amt chocolate
		String chocolateString = inputOutput("\nPlease enter the units of chocolate to add: ");

		try {
			coffeeMaker.addInventory(coffeeString, milkString, sugarString, chocolateString);
			System.out.println("Inventory successfully added");
		} catch (InventoryException e) {
			System.out.println("Inventory was not added");
		} finally {
			mainMenu();
		}
	}

	/**
	 * Check inventory user interface that processes input.
	 */
	public static void checkInventory() {
		System.out.println(coffeeMaker.checkInventory());
		mainMenu();
	}

	/**
	 * Make coffee user interface the processes input.
	 */
	public static void makeCoffee() {
		Recipe[] recipes = coffeeMaker.getRecipes();
		for (int i = 0; i < recipes.length; i++) {
			if (recipes[i] != null) {
				System.out.println((i + 1) + ". " + recipes[i].getName());
			}
		}

		int recipeToPurchase = recipeListSelection("Please select the number of the recipe to purchase.");

		String amountPaid = inputOutput("Please enter the amount you wish to pay");
		int amtPaid = 0;
		try {
			amtPaid = Integer.parseInt(amountPaid);
		} catch (NumberFormatException e) {
			System.out.println("Please enter a positive integer");
			mainMenu();
		}

		int change = coffeeMaker.makeCoffee(recipeToPurchase, amtPaid);

		if (change == amtPaid) {
			System.out.println("Insufficient funds to purchase.");
		} else {
			System.out.println("Thank you for purchasing " + coffeeMaker.getRecipes()[recipeToPurchase].getName());
		}
		System.out.println("Your change is: " + change + "\n");
		mainMenu();
	}

	/**
	 * Passes a prompt to the user and returns the user specified string.
	 * 
	 * @param message
	 * @return String
	 */
	private static String inputOutput(String message) {
		System.out.println(message);
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		String returnString = "";
		try {
			returnString = br.readLine();
		} catch (IOException e) {
			System.out.println("Error reading in value");
			mainMenu();
		}
		return returnString;
	}

	/**
	 * Passes a prompt to the user that deals with the recipe list and returns the
	 * user selected number.
	 * 
	 * @param message
	 * @return int
	 */
	private static int recipeListSelection(String message) {
		String userSelection = inputOutput(message);
		int recipe = 0;
		try {
			recipe = Integer.parseInt(userSelection) - 1;
			if (recipe >= 0 && recipe <= 2) {
				// do nothing here.
			} else {
				recipe = -1;
			}
		} catch (NumberFormatException e) {
			System.out.println("Please select a number from 1-3.");
			recipe = -1;
		}
		return recipe;
	}

	/**
	 * Starts the coffee maker program.
	 * 
	 * @param args
	 */
	public static void main(String[] args) {
		coffeeMaker = new CoffeeMaker();
		System.out.println("Welcome to the CoffeeMaker!\n");
		mainMenu();
	}
}

----------------------------------------------------------------------------------------------------------------

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main {
	private static CoffeeMaker coffeeMaker;

	/**
	 * Prints the main menu and handles user input for main menu commands.
	 */
	public static void mainMenu() {
		System.out.println("1. Add a recipe");
		System.out.println("2. Delete a recipe");
		System.out.println("3. Edit a recipe");
		System.out.println("4. Add inventory");
		System.out.println("5. Check inventory");
		System.out.println("6. Make coffee");
		System.out.println("0. Exit\n");

		// Get user input
		try {
			int userInput = Integer.parseInt(inputOutput(
					"Please press the number that corresponds to what you would like the coffee maker to do."));

			if (userInput >= 0 && userInput <= 6) {
				if (userInput == 1)
					addRecipe();
				if (userInput == 2)
					deleteRecipe();
				if (userInput == 3)
					editRecipe();
				if (userInput == 4)
					addInventory();
				if (userInput == 5)
					checkInventory();
				if (userInput == 6)
					makeCoffee();
				if (userInput == 0)
					System.exit(0);
			} else {
				System.out.println("Please enter a number from 0 - 6");
				mainMenu();
			}
		} catch (NumberFormatException e) {
			System.out.println("Please enter a number from 0 - 6");
			mainMenu();
		}
	}

	/**
	 * The add recipe user interface that process user input.
	 */
	public static void addRecipe() {

		// Read in recipe name
		String name = inputOutput("\nPlease enter the recipe name: ");

		// Read in recipe price
		String priceString = inputOutput("\nPlease enter the recipe price: $");

		// Read in amt coffee
		String coffeeString = inputOutput("\nPlease enter the units of coffee in the recipe: ");

		// Read in amt milk
		String milkString = inputOutput("\nPlease enter the units of milk in the recipe: ");

		// Read in amt sugar
		String sugarString = inputOutput("\nPlease enter the units of sugar in the recipe: ");

		// Read in amt chocolate
		String chocolateString = inputOutput("\nPlease enter the units of chocolate in the recipe: ");

		Recipe r = new Recipe();
		try {
			r.setName(name);
			r.setPrice(priceString);
			r.setAmtCoffee(coffeeString);
			r.setAmtMilk(milkString);
			r.setAmtSugar(sugarString);
			r.setAmtChocolate(chocolateString);

			boolean recipeAdded = coffeeMaker.addRecipe(r);

			if (recipeAdded) {
				System.out.println(name + " successfully added.\n");
			} else {
				System.out.println(name + " could not be added.\n");
			}
		} catch (RecipeException e) {
			System.out.println(e.getMessage());
		} finally {
			mainMenu();
		}
	}

	/**
	 * Delete recipe user interface that processes input.
	 */
	public static void deleteRecipe() {
		Recipe[] recipes = coffeeMaker.getRecipes();
		for (int i = 0; i < recipes.length; i++) {
			if (recipes[i] != null) {
				System.out.println((i + 1) + ". " + recipes[i].getName());
			}
		}
		int recipeToDelete = recipeListSelection("Please select the number of the recipe to delete.");

		if (recipeToDelete < 0) {
			mainMenu();
		}

		String recipeDeleted = coffeeMaker.deleteRecipe(recipeToDelete);

		if (recipeDeleted != null) {
			System.out.println(recipeDeleted + " successfully deleted.\n");
		} else {
			System.out.println("Selected recipe doesn't exist and could not be deleted.\n");
		}
		mainMenu();
	}

	/**
	 * Edit recipe user interface the processes user input.
	 */
	public static void editRecipe() {
		Recipe[] recipes = coffeeMaker.getRecipes();
		for (int i = 0; i < recipes.length; i++) {
			if (recipes[i] != null) {
				System.out.println((i + 1) + ". " + recipes[i].getName());
			}
		}
		int recipeToEdit = recipeListSelection("Please select the number of the recipe to edit.");

		if (recipeToEdit < 0) {
			mainMenu();
		}

		// Read in recipe price
		String priceString = inputOutput("\nPlease enter the recipe price: $");

		// Read in amt coffee
		String coffeeString = inputOutput("\nPlease enter the units of coffee in the recipe: ");

		// Read in amt milk
		String milkString = inputOutput("\nPlease enter the units of milk in the recipe: ");

		// Read in amt sugar
		String sugarString = inputOutput("\nPlease enter the units of sugar in the recipe: ");

		// Read in amt chocolate
		String chocolateString = inputOutput("\nPlease enter the units of chocolate in the recipe: ");

		Recipe newRecipe = new Recipe();
		try {
			newRecipe.setPrice(priceString);
			newRecipe.setAmtCoffee(coffeeString);
			newRecipe.setAmtMilk(milkString);
			newRecipe.setAmtSugar(sugarString);
			newRecipe.setAmtChocolate(chocolateString);

			String recipeEdited = coffeeMaker.editRecipe(recipeToEdit, newRecipe);

			if (recipeEdited != null) {
				System.out.println(recipeEdited + " successfully edited.\n");
			} else {
				System.out.println(recipeEdited + "could not be edited.\n");
			}
		} catch (RecipeException e) {
			System.out.println(e.getMessage());
		} finally {
			mainMenu();
		}
	}

	/**
	 * Add inventory user interface that processes input.
	 */
	public static void addInventory() {
		// Read in amt coffee
		String coffeeString = inputOutput("\nPlease enter the units of coffee to add: ");

		// Read in amt milk
		String milkString = inputOutput("\nPlease enter the units of milk to add: ");

		// Read in amt sugar
		String sugarString = inputOutput("\nPlease enter the units of sugar to add: ");

		// Read in amt chocolate
		String chocolateString = inputOutput("\nPlease enter the units of chocolate to add: ");

		try {
			coffeeMaker.addInventory(coffeeString, milkString, sugarString, chocolateString);
			System.out.println("Inventory successfully added");
		} catch (InventoryException e) {
			System.out.println("Inventory was not added");
		} finally {
			mainMenu();
		}
	}

	/**
	 * Check inventory user interface that processes input.
	 */
	public static void checkInventory() {
		System.out.println(coffeeMaker.checkInventory());
		mainMenu();
	}

	/**
	 * Make coffee user interface the processes input.
	 */
	public static void makeCoffee() {
		Recipe[] recipes = coffeeMaker.getRecipes();
		for (int i = 0; i < recipes.length; i++) {
			if (recipes[i] != null) {
				System.out.println((i + 1) + ". " + recipes[i].getName());
			}
		}

		int recipeToPurchase = recipeListSelection("Please select the number of the recipe to purchase.");

		String amountPaid = inputOutput("Please enter the amount you wish to pay");
		int amtPaid = 0;
		try {
			amtPaid = Integer.parseInt(amountPaid);
		} catch (NumberFormatException e) {
			System.out.println("Please enter a positive integer");
			mainMenu();
		}

		int change = coffeeMaker.makeCoffee(recipeToPurchase, amtPaid);

		if (change == amtPaid) {
			System.out.println("Insufficient funds to purchase.");
		} else {
			System.out.println("Thank you for purchasing " + coffeeMaker.getRecipes()[recipeToPurchase].getName());
		}
		System.out.println("Your change is: " + change + "\n");
		mainMenu();
	}

	/**
	 * Passes a prompt to the user and returns the user specified string.
	 * 
	 * @param message
	 * @return String
	 */
	private static String inputOutput(String message) {
		System.out.println(message);
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		String returnString = "";
		try {
			returnString = br.readLine();
		} catch (IOException e) {
			System.out.println("Error reading in value");
			mainMenu();
		}
		return returnString;
	}

	/**
	 * Passes a prompt to the user that deals with the recipe list and returns the
	 * user selected number.
	 * 
	 * @param message
	 * @return int
	 */
	private static int recipeListSelection(String message) {
		String userSelection = inputOutput(message);
		int recipe = 0;
		try {
			recipe = Integer.parseInt(userSelection) - 1;
			if (recipe >= 0 && recipe <= 2) {
				// do nothing here.
			} else {
				recipe = -1;
			}
		} catch (NumberFormatException e) {
			System.out.println("Please select a number from 1-3.");
			recipe = -1;
		}
		return recipe;
	}

	/**
	 * Starts the coffee maker program.
	 * 
	 * @param args
	 */
	public static void main(String[] args) {
		coffeeMaker = new CoffeeMaker();
		System.out.println("Welcome to the CoffeeMaker!\n");
		mainMenu();
	}
}

----------------------------------------------------------------------------------------------------------------

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;
import static org.mockito.Mockito.*;

public class CoffeeMakerTest {

    private CoffeeMaker coffeeMaker;
    private RecipeBook recipeBook;
    private Inventory inventory;

    @Before
    public void setUp() {
        coffeeMaker = new CoffeeMaker();
        recipeBook = Mockito.mock(RecipeBook.class);
        inventory = Mockito.mock(Inventory.class);
        CoffeeMaker.recipeBook = recipeBook;
        CoffeeMaker.inventory = inventory;
    }

    @Test
    public void testAddRecipe() {
        Recipe recipe = Mockito.mock(Recipe.class);
        when(recipeBook.addRecipe(recipe)).thenReturn(true);
        Assert.assertTrue(coffeeMaker.addRecipe(recipe));
    }

    @Test
    public void testDeleteRecipe() {
        when(recipeBook.deleteRecipe(0)).thenReturn("Espresso");
        Assert.assertEquals("Espresso", coffeeMaker.deleteRecipe(0));
    }

    @Test
    public void testEditRecipe() {
        Recipe recipe = Mockito.mock(Recipe.class);
        when(recipeBook.editRecipe(0, recipe)).thenReturn("Espresso");
        Assert.assertEquals("Espresso", coffeeMaker.editRecipe(0, recipe));
    }

    @Test
    public void testAddInventory() throws InventoryException {
        coffeeMaker.addInventory("1", "2", "3", "4");
        verify(inventory, times(1)).addCoffee("1");
        verify(inventory, times(1)).addMilk("2");
        verify(inventory, times(1)).addSugar("3");
        verify(inventory, times(1)).addChocolate("4");
    }

    @Test
    public void testCheckInventory() {
        when(inventory.toString()).thenReturn("Coffee: 15\nMilk: 20\nSugar: 10\nChocolate: 5\n");
        Assert.assertEquals("Coffee: 15\nMilk: 20\nSugar: 10\nChocolate: 5\n", coffeeMaker.checkInventory());
    }

    @Test
    public void testMakeCoffee_RecipeNotFound() {
        when(recipeBook.getRecipes()).thenReturn(new Recipe[]{null, null, null, null});
        Assert.assertEquals(50, coffeeMaker.makeCoffee(0, 50));
    }

    @Test
    public void testMakeCoffee_NotEnoughMoney() {
        Recipe recipe = Mockito.mock(Recipe.class);
        when(recipeBook.getRecipes()).thenReturn(new Recipe[]{recipe});
        when(recipe.getPrice()).thenReturn(100);
        Assert.assertEquals(50, coffeeMaker.makeCoffee(0, 50));
    }

    @Test
    public void testMakeCoffee_IngredientsNotEnough() {
        Recipe recipe = Mockito.mock(Recipe.class);
        when(recipeBook.getRecipes()).thenReturn(new Recipe[]{recipe});
        when(recipe.getPrice()).thenReturn(100);
        when(inventory.useIngredients(recipe)).thenReturn(false);
        Assert.assertEquals(100, coffeeMaker.makeCoffee(0, 150));
    }

    @Test
    public void testMakeCoffee_Successful() {
        Recipe recipe = Mockito.mock(Recipe.class);
        when(recipeBook.getRecipes()).thenReturn(new Recipe[]{recipe});
        when(recipe.getPrice()).thenReturn(100);
        when(inventory.useIngredients(recipe)).thenReturn(true);
        Assert.assertEquals(50, coffeeMaker.makeCoffee(0, 150));
    }

    @Test
    public void testGetRecipes() {
        Recipe[] recipes = new Recipe[]{null, null, null, null};
        when(recipeBook.getRecipes()).thenReturn(recipes);
        Assert.assertArrayEquals(recipes, coffeeMaker.getRecipes());
    }
}




----------------------------------------------------------------------------------------------------------------

public class Recipe {
	private String name;
	private int price;
	private int amtCoffee;
	private int amtMilk;
	private int amtSugar;
	private int amtChocolate;

	/**
	 * Creates a default recipe for the coffee maker.
	 */
	public Recipe() {
		this.name = "";
		this.price = 0;
		this.amtCoffee = 0;
		this.amtMilk = 0;
		this.amtSugar = 0;
		this.amtChocolate = 0;
	}

	/**
	 * @return Returns the amtChocolate.
	 */
	public int getAmtChocolate() {
		return amtChocolate;
	}

	/**
	 * @param amtChocolate The amtChocolate to set.
	 */
	public void setAmtChocolate(String chocolate) throws RecipeException {
		int amtChocolate = 0;
		try {
			amtChocolate = Integer.parseInt(chocolate);
		} catch (NumberFormatException e) {
			throw new RecipeException("Units of chocolate must be a positive integer");
		}
		if (amtChocolate >= 0) {
			this.amtChocolate = amtChocolate;
		} else {
			throw new RecipeException("Units of chocolate must be a positive integer");
		}
	}

	/**
	 * @return Returns the amtCoffee.
	 */
	public int getAmtCoffee() {
		return amtCoffee;
	}

	/**
	 * @param amtCoffee The amtCoffee to set.
	 */
	public void setAmtCoffee(String coffee) throws RecipeException {
		int amtCoffee = 0;
		try {
			amtCoffee = Integer.parseInt(coffee);
		} catch (NumberFormatException e) {
			throw new RecipeException("Units of coffee must be a positive integer");
		}
		if (amtCoffee >= 0) {
			this.amtCoffee = amtCoffee;
		} else {
			throw new RecipeException("Units of coffee must be a positive integer");
		}
	}

	/**
	 * @return Returns the amtMilk.
	 */
	public int getAmtMilk() {
		return amtMilk;
	}

	/**
	 * @param amtMilk The amtMilk to set.
	 */
	public void setAmtMilk(String milk) throws RecipeException {
		int amtMilk = 0;
		try {
			amtMilk = Integer.parseInt(milk);
		} catch (NumberFormatException e) {
			throw new RecipeException("Units of milk must be a positive integer");
		}
		if (amtMilk >= 0) {
			this.amtMilk = amtMilk;
		} else {
			throw new RecipeException("Units of milk must be a positive integer");
		}
	}

	/**
	 * @return Returns the amtSugar.
	 */
	public int getAmtSugar() {
		return amtSugar;
	}

	/**
	 * @param amtSugar The amtSugar to set.
	 */
	public void setAmtSugar(String sugar) throws RecipeException {
		int amtSugar = 0;
		try {
			amtSugar = Integer.parseInt(sugar);
		} catch (NumberFormatException e) {
			throw new RecipeException("Units of sugar must be a positive integer");
		}
		if (amtSugar >= 0) {
			this.amtSugar = amtSugar;
		} else {
			throw new RecipeException("Units of sugar must be a positive integer");
		}
	}

	/**
	 * @return Returns the name.
	 */
	public String getName() {
		return name;
	}

	/**
	 * @param name The name to set.
	 */
	public void setName(String name) {
		if (name != null) {
			this.name = name;
		}
	}

	/**
	 * @return Returns the price.
	 */
	public int getPrice() {
		return price;
	}

	/**
	 * @param price The price to set.
	 */
	public void setPrice(String price) throws RecipeException {
		int amtPrice = 0;
		try {
			amtPrice = Integer.parseInt(price);
		} catch (NumberFormatException e) {
			throw new RecipeException("Price must be a positive integer");
		}
		if (amtPrice >= 0) {
			this.price = amtPrice;
		} else {
			throw new RecipeException("Price must be a positive integer");
		}
	}

	/**
	 * Returns the name of the recipe.
	 * 
	 * @return String
	 */
	public String toString() {
		return name;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		final Recipe other = (Recipe) obj;
		if (name == null) {
			if (other.name != null)
				return false;
		} else if (!name.equals(other.name))
			return false;
		return true;
	}

}

----------------------------------------------------------------------------------------------------------------

import org.junit.Test;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

/**
 This class contains JUnit and Mockito tests for the Recipe class.
 */

public class RecipeTest {

    /**
     * Test setting non-integer amount of milk throws a RecipeException.
     *
     * @throws RecipeException if non-integer value is passed to setAmtMilk method.
     */
    @Test(expected = RecipeException.class)
    public void testSetNonIntegerAmtMilk() throws RecipeException {
        Recipe r = new Recipe();
        r.setAmtMilk("not an integer");
    }

    /**
     * Test setting negative amount of sugar throws a RecipeException.
     *
     * @throws RecipeException if negative value is passed to setAmtSugar method.
     */
    @Test(expected = RecipeException.class)
    public void testSetNegativeAmtSugar() throws RecipeException {
        Recipe r = new Recipe();
        r.setAmtSugar("-1");
    }

    /**
     * Test setting non-integer amount of sugar throws a RecipeException.
     *
     * @throws RecipeException if non-integer value is passed to setAmtSugar method.
     */
    @Test(expected = RecipeException.class)
    public void testSetNonIntegerAmtSugar() throws RecipeException {
        Recipe r = new Recipe();
        r.setAmtSugar("not an integer");
    }

    /**
     * Test setting negative amount of chocolate throws a RecipeException.
     *
     * @throws RecipeException if negative value is passed to setAmtChocolate method.
     */
    @Test(expected = RecipeException.class)
    public void testSetNegativeAmtChocolate() throws RecipeException {
        Recipe r = new Recipe();
        r.setAmtChocolate("-1");
    }

    /**
     * Test setting non-integer amount of chocolate throws a RecipeException.
     *
     * @throws RecipeException if non-integer value is passed to setAmtChocolate method.
     */
    @Test(expected = RecipeException.class)
    public void testSetNonIntegerAmtChocolate() throws RecipeException {
        Recipe r = new Recipe();
        r.setAmtChocolate("not an integer");
    }

    /**
     * Test hashCode method for the same recipe objects.
     */
    @Test
    public void testHashCodeEqual() {
        Recipe r1 = new Recipe();
        Recipe r2 = new Recipe();
        r1.setName("Latte");
        r2.setName("Latte");
        assertEquals(r1.hashCode(), r2.hashCode());
    }

    /**
     * Test hashCode method for different recipe objects.
     */
    @Test
    public void testHashCodeNotEqual() {
        Recipe r1 = new Recipe();
        Recipe r2 = new Recipe();
        r1.setName("Latte");
        r2.setName("Cappuccino");
        assertNotEquals(r1.hashCode(), r2.hashCode());
    }


    /**
     * This method tests the setName() method of the Recipe class.
     * It sets the name of the recipe to "Coffee" and checks if the name is equal to "Coffee".
     */
    @Test
    public void testSetName() {
        Recipe recipe = new Recipe();
        recipe.setName("Coffee");
        assertEquals("Coffee", recipe.getName());
    }

    /**
     * This method tests the setPrice() method of the Recipe class.
     * It sets the price of the recipe to "50" and checks if the price is equal to 50.
     *
     * @throws RecipeException if price is not a valid integer.
     */
    @Test
    public void testSetPrice() throws RecipeException {
        Recipe recipe = new Recipe();
        recipe.setPrice("50");
        assertEquals(50, recipe.getPrice());
    }

    /**
     * This method tests the setAmtCoffee() method of the Recipe class.
     * It sets the amount of coffee of the recipe to "3" and checks if the amount is equal to 3.
     *
     * @throws RecipeException if amount is not a valid integer.
     */
    @Test
    public void testSetAmtCoffee() throws RecipeException {
        Recipe recipe = new Recipe();
        recipe.setAmtCoffee("3");
        assertEquals(3, recipe.getAmtCoffee());
    }

    /**
     * This method tests the setAmtMilk() method of the Recipe class.
     * It sets the amount of milk of the recipe to "2" and checks if the amount is equal to 2.
     *
     * @throws RecipeException if amount is not a valid integer.
     */
    @Test
    public void testSetAmtMilk() throws RecipeException {
        Recipe recipe = new Recipe();
        recipe.setAmtMilk("2");
        assertEquals(2, recipe.getAmtMilk());
    }

    /**
     * This method tests the setAmtSugar() method of the Recipe class.
     * It sets the amount of sugar of the recipe to "1" and checks if the amount is equal to 1.
     *
     * @throws RecipeException if amount is not a valid integer.
     */
    @Test
    public void testSetAmtSugar() throws RecipeException {
        Recipe recipe = new Recipe();
        recipe.setAmtSugar("1");
        assertEquals(1, recipe.getAmtSugar());
    }

    /**
     * This method tests the setAmtChocolate() method of the Recipe class.
     * It sets the amount of chocolate of the recipe to "4" and checks if the amount is equal to 4.
     *
     * @throws RecipeException if amount is not a valid integer.
     */
    @Test
    public void testSetAmtChocolate() throws RecipeException {
        Recipe recipe = new Recipe();
        recipe.setAmtChocolate("4");
        assertEquals(4, recipe.getAmtChocolate());
    }


    /**
     * Test case to ensure that the equals method correctly compares two recipes with the same name
     */
    @Test
    public void testEquals() {
        Recipe recipe1 = new Recipe();
        Recipe recipe2 = new Recipe();
        recipe1.setName("Coffee");
        recipe2.setName("Coffee");
        assertEquals(recipe1, recipe2);
    }

    /**
     * Test case to ensure that the equals method correctly compares two recipes with different names
     */
    @Test
    public void testNotEquals() {
        Recipe recipe1 = new Recipe();
        Recipe recipe2 = new Recipe();
        recipe1.setName("Coffee");
        recipe2.setName("Tea");
        assertNotEquals(recipe1, recipe2);
    }

    /**
     * Test case to ensure that setting the amount of chocolate to a valid value works correctly
     */
    @Test
    public void testSetAmtChocolateValid() throws RecipeException {
        Recipe recipe = new Recipe();
        recipe.setAmtChocolate("3");
        assertEquals(3, recipe.getAmtChocolate());
    }

    /**
     * Test case to ensure that setting the amount of chocolate to a negative value throws a RecipeException
     */

    @Test(expected = RecipeException.class)
    public void testSetAmtChocolateNegative() throws RecipeException {
        Recipe recipe = new Recipe();
        recipe.setAmtChocolate("-1");
    }

    /**
     * Tests setting the amount of chocolate to a non-numeric value.
     * Expects a RecipeException to be thrown.
     *
     * @throws RecipeException if there is an error setting the amount of chocolate
     */
    @Test(expected = RecipeException.class)
    public void testSetAmtChocolateNotANumber() throws RecipeException {
        Recipe recipe = new Recipe();
        recipe.setAmtChocolate("chocolate");
    }

    /**
     * Tests setting the amount of coffee to a valid value.
     * Expects the value to be set correctly.
     *
     * @throws RecipeException if there is an error setting the amount of coffee
     */
    @Test
    public void testSetAmtCoffeeValid() throws RecipeException {
        Recipe recipe = new Recipe();
        recipe.setAmtCoffee("2");
        assertEquals(2, recipe.getAmtCoffee());
    }

    /**
     * Tests setting the amount of coffee to a negative value.
     * Expects a RecipeException to be thrown.
     *
     * @throws RecipeException if there is an error setting the amount of coffee
     */
    @Test(expected = RecipeException.class)
    public void testSetAmtCoffeeNegative() throws RecipeException {
        Recipe recipe = new Recipe();
        recipe.setAmtCoffee("-1");
    }

    /**
     * Tests setting the amount of coffee to a non-numeric value.
     * Expects a RecipeException to be thrown.
     *
     * @throws RecipeException if there is an error setting the amount of coffee
     */
    @Test(expected = RecipeException.class)
    public void testSetAmtCoffeeNotANumber() throws RecipeException {
        Recipe recipe = new Recipe();
        recipe.setAmtCoffee("coffee");
    }

    /**
     * Tests the setAmtMilk method with a valid input.
     *
     * @throws RecipeException if an error occurs.
     */
    @Test
    public void testSetAmtMilkValid() throws RecipeException {
        Recipe recipe = new Recipe();
        recipe.setAmtMilk("1");
        assertEquals(1, recipe.getAmtMilk());
    }

    /**
     * Tests the setAmtMilk method with a negative input.
     *
     * @throws RecipeException if an error occurs.
     */
    @Test(expected = RecipeException.class)
    public void testSetAmtMilkNegative() throws RecipeException {
        Recipe recipe = new Recipe();
        recipe.setAmtMilk("-1");
    }

    /**
     * Tests the setAmtMilk method with a non-number input.
     *
     * @throws RecipeException if an error occurs.
     */
    @Test(expected = RecipeException.class)
    public void testSetAmtMilkNotANumber() throws RecipeException {
        Recipe recipe = new Recipe();
        recipe.setAmtMilk("milk");
    }

    /**
     * Tests the setAmtSugar method with a valid input.
     *
     * @throws RecipeException if an error occurs.
     */
    @Test
    public void testSetAmtSugarValid() throws RecipeException {
        Recipe recipe = new Recipe();
        recipe.setAmtSugar("4");
        assertEquals(4, recipe.getAmtSugar());
    }

    /**
     * Tests the setAmtSugar method with a negative input.
     *
     * @throws RecipeException if an error occurs.
     */
    @Test(expected = RecipeException.class)
    public void testSetAmtSugarNegative() throws RecipeException {
        Recipe recipe = new Recipe();
        recipe.setAmtSugar("-1");
    }

    /**
     * Tests the setAmtSugar method with a non-number input.
     *
     * @throws RecipeException if an error occurs.
     */
    @Test(expected = RecipeException.class)
    public void testSetAmtSugarNotANumber() throws RecipeException {
        Recipe recipe = new Recipe();
        recipe.setAmtSugar("sugar");
    }

    /**
     * Tests the setName method with a valid input.
     */
    @Test
    public void testSetNameValid() {
        Recipe recipe = new Recipe();
        recipe.setName("Latte");
        assertEquals("Latte", recipe.getName());
    }


    /**
     * Tests the setName method of the Recipe class with null input.
     * Expects an empty string as the name of the Recipe object.
     */
    @Test
    public void testSetNameNull() {
        Recipe recipe = new Recipe();
        recipe.setName(null);
        assertEquals("", recipe.getName());
    }

    /**
     * Tests the setPrice method of the Recipe class with valid input.
     */
    @Test
    public void testSetPriceValid() throws RecipeException {
        Recipe recipe = new Recipe();
        recipe.setPrice("5");
        assertEquals(5, recipe.getPrice());
    }

    /**
     * Tests the setPrice method of the Recipe class with negative input.
     * Expects a RecipeException to be thrown.
     */
    @Test(expected = RecipeException.class)
    public void testSetPriceNegative() throws RecipeException {
        Recipe recipe = new Recipe();
        recipe.setPrice("-1");
    }

    /**
     * Tests the setPrice method of the Recipe class with non-numeric input.
     * Expects a RecipeException to be thrown.
     */
    @Test(expected = RecipeException.class)
    public void testSetPriceNotANumber() throws RecipeException {
        Recipe recipe = new Recipe();
        recipe.setPrice("price");
    }

    /**
     * Tests the toString method of the Recipe class.
     */
    @Test
    public void testToString() {
        Recipe recipe = new Recipe();
        recipe.setName("Cappuccino");
        assertEquals("Cappuccino", recipe.toString());
    }

    /**
     * Tests the getName method of the Recipe class.
     */
    @Test
    public void testSetNameAndGet() {
        Recipe r = new Recipe();
        String name = "Latte";
        r.setName(name);
        assertEquals(name, r.getName());
    }

    /**
     * Tests the set and get methods for the price of a recipe.
     *
     * @throws RecipeException if the price is negative or not an integer
     */
    @Test
    public void testSetPriceAndGet() throws RecipeException {
        Recipe r = new Recipe();
        int price = 250;
        r.setPrice(Integer.toString(price));
        assertEquals(price, r.getPrice());
    }

    /**
     * Tests the set and get methods for the amount of coffee in a recipe.
     *
     * @throws RecipeException if the amount is negative or not an integer
     */
    @Test
    public void testSetAmtCoffeeAndGet() throws RecipeException {
        Recipe r = new Recipe();
        int amtCoffee = 2;
        r.setAmtCoffee(Integer.toString(amtCoffee));
        assertEquals(amtCoffee, r.getAmtCoffee());
    }

    /**
     * Tests the set and get methods for the amount of milk in a recipe.
     *
     * @throws RecipeException if the amount is negative or not an integer
     */
    @Test
    public void testSetAmtMilkAndGet() throws RecipeException {
        Recipe r = new Recipe();
        int amtMilk = 3;
        r.setAmtMilk(Integer.toString(amtMilk));
        assertEquals(amtMilk, r.getAmtMilk());
    }

    /**
     * Tests the set and get methods for the amount of sugar in a recipe.
     *
     * @throws RecipeException if the amount is negative or not an integer
     */
    @Test
    public void testSetAmtSugarAndGet() throws RecipeException {
        Recipe r = new Recipe();
        int amtSugar = 1;
        r.setAmtSugar(Integer.toString(amtSugar));
        assertEquals(amtSugar, r.getAmtSugar());
    }

    /**
     * Tests the set and get methods for the amount of chocolate in a recipe.
     *
     * @throws RecipeException if the amount is negative or not an integer
     */
    @Test
    public void testSetAmtChocolateAndGet() throws RecipeException {
        Recipe r = new Recipe();
        int amtChocolate = 0;
        r.setAmtChocolate(Integer.toString(amtChocolate));
        assertEquals(amtChocolate, r.getAmtChocolate());
    }

    /**
     * Tests the setPrice method with a negative value.
     * Expects RecipeException to be thrown.
     *
     * @throws RecipeException if the price is negative or not an integer
     */
    @Test(expected = RecipeException.class)
    public void testSetNegativePrice() throws RecipeException {
        Recipe r = new Recipe();
        r.setPrice("-1");
    }

    /**
     * Tests the setPrice method with a non-integer value.
     * Expects RecipeException to be thrown.
     *
     * @throws RecipeException if the price is negative or not an integer
     */
    @Test(expected = RecipeException.class)
    public void testSetNonIntegerPrice() throws RecipeException {
        Recipe r = new Recipe();
        r.setPrice("not an integer");
    }

    /**
     * Tests the setAmtCoffee method with a negative value.
     * Expects RecipeException to be thrown.
     *
     * @throws RecipeException if the amount is negative or not an integer
     */
    @Test(expected = RecipeException.class)
    public void testSetNegativeAmtCoffee() throws RecipeException {
        Recipe r = new Recipe();
        r.setAmtCoffee("-1");
    }

    /**

     Test setting non-integer amount of coffee throws a RecipeException.
     @throws RecipeException if non-integer value is passed to setAmtCoffee method.
     */
    @Test(expected = RecipeException.class)
    public void testSetNonIntegerAmtCoffee() throws RecipeException {
        Recipe r = new Recipe();
        r.setAmtCoffee("not an integer");
    }
    /**

     Test setting negative amount of milk throws a RecipeException.
     @throws RecipeException if negative value is passed to setAmtMilk method.
     */
    @Test(expected = RecipeException.class)
    public void testSetNegativeAmtMilk() throws RecipeException {
        Recipe r = new Recipe();
        r.setAmtMilk("-1");
    }
    /**

     Test setting non-integer amount of milk throws a RecipeException.
     @throws RecipeException if non-integer value is passed to setAmtMilk method.
     */
    @Test(expected = RecipeException.class)
    public void testSetNonIntegerAmtMilk1() throws RecipeException {
        Recipe r = new Recipe();
        r.setAmtMilk("not an integer");
    }
    /**

     Test the hashCode() method of Recipe class returns the same hashcode for equal objects.
     */
    @Test
    public void testHashCode() {
        Recipe r1 = new Recipe();
        r1.setName("Latte");
        Recipe r2 = new Recipe();
        r2.setName("Latte");

        assertEquals(r1.hashCode(), r2.hashCode());
    }
}


----------------------------------------------------------------------------------------------------------------

public class Inventory {

	private static int coffee;
	private static int milk;
	private static int sugar;
	private static int chocolate;

	/**
	 * Creates a coffee maker inventory object and fills each item in the inventory
	 * with 15 units.
	 */
	public Inventory() {
		setCoffee(15);
		setMilk(15);
		setSugar(15);
		setChocolate(15);
	}

	/**
	 * Returns the current number of chocolate units in the inventory.
	 * 
	 * @return int
	 */
	public int getChocolate() {
		return chocolate;
	}

	/**
	 * Sets the number of chocolate units in the inventory to the specified amount.
	 * 
	 * @param chocolate
	 */
	public synchronized void setChocolate(int chocolate) {
		if (chocolate >= 0) {
			Inventory.chocolate = chocolate;
		}

	}

	/**
	 * Add the number of chocolate units in the inventory to the current amount of
	 * chocolate units.
	 * 
	 * @param chocolate
	 * @throws InventoryException
	 */
	public synchronized void addChocolate(String chocolate) throws InventoryException {
		int amtChocolate = 0;
		try {
			amtChocolate = Integer.parseInt(chocolate);
		} catch (NumberFormatException e) {
			throw new InventoryException("Units of chocolate must be a positive integer");
		}
		if (amtChocolate >= 0) {
			Inventory.chocolate += amtChocolate;
		} else {
			throw new InventoryException("Units of chocolate must be a positive integer");
		}
	}

	/**
	 * Returns the current number of coffee units in the inventory.
	 * 
	 * @return int
	 */
	public int getCoffee() {
		return coffee;
	}

	/**
	 * Sets the number of coffee units in the inventory to the specified amount.
	 * 
	 * @param coffee
	 */
	public synchronized void setCoffee(int coffee) {
		if (coffee >= 0) {
			Inventory.coffee = coffee;
		}
	}

	/**
	 * Add the number of coffee units in the inventory to the current amount of
	 * coffee units.
	 * 
	 * @param coffee
	 * @throws InventoryException
	 */
	public synchronized void addCoffee(String coffee) throws InventoryException {
		int amtCoffee = 0;
		try {
			amtCoffee = Integer.parseInt(coffee);
		} catch (NumberFormatException e) {
			throw new InventoryException("Units of coffee must be a positive integer");
		}
		if (amtCoffee >= 0) {
			Inventory.coffee += amtCoffee;
		} else {
			throw new InventoryException("Units of coffee must be a positive integer");
		}
	}

	/**
	 * Returns the current number of milk units in the inventory.
	 * 
	 * @return int
	 */
	public int getMilk() {
		return milk;
	}

	/**
	 * Sets the number of milk units in the inventory to the specified amount.
	 * 
	 * @param milk
	 */
	public synchronized void setMilk(int milk) {
		if (milk >= 0) {
			Inventory.milk = milk;
		}
	}

	/**
	 * Add the number of milk units in the inventory to the current amount of milk
	 * units.
	 * 
	 * @param milk
	 * @throws InventoryException
	 */
	public synchronized void addMilk(String milk) throws InventoryException {
		int amtMilk = 0;
		try {
			amtMilk = Integer.parseInt(milk);
		} catch (NumberFormatException e) {
			throw new InventoryException("Units of milk must be a positive integer");
		}
		if (amtMilk >= 0) {
			Inventory.milk += amtMilk;
		} else {
			throw new InventoryException("Units of milk must be a positive integer");
		}
	}

	/**
	 * Returns the current number of sugar units in the inventory.
	 * 
	 * @return int
	 */
	public int getSugar() {
		return sugar;
	}

	/**
	 * Sets the number of sugar units in the inventory to the specified amount.
	 * 
	 * @param sugar
	 */
	public synchronized void setSugar(int sugar) {
		if (sugar >= 0) {
			Inventory.sugar = sugar;
		}
	}

	/**
	 * Add the number of sugar units in the inventory to the current amount of sugar
	 * units.
	 * 
	 * @param sugar
	 * @throws InventoryException
	 */
	public synchronized void addSugar(String sugar) throws InventoryException {
		int amtSugar = 0;
		try {
			amtSugar = Integer.parseInt(sugar);
		} catch (NumberFormatException e) {
			throw new InventoryException("Units of sugar must be a positive integer");
		}
		if (amtSugar >= 0) {
			Inventory.sugar += amtSugar;
		} else {
			throw new InventoryException("Units of sugar must be a positive integer");
		}
	}

	/**
	 * Returns true if there are enough ingredients to make the beverage.
	 * 
	 * @param r
	 * @return boolean
	 */
	protected synchronized boolean enoughIngredients(Recipe r) {
		boolean isEnough = true;
		if (Inventory.coffee < r.getAmtCoffee()) {
			isEnough = false;
		}
		if (Inventory.milk < r.getAmtMilk()) {
			isEnough = false;
		}
		if (Inventory.sugar < r.getAmtSugar()) {
			isEnough = false;
		}
		if (Inventory.chocolate < r.getAmtChocolate()) {
			isEnough = false;
		}
		return isEnough;
	}

	/**
	 * Removes the ingredients used to make the specified recipe. Assumes that the
	 * user has checked that there are enough ingredients to make
	 * 
	 * @param r
	 */
	public synchronized boolean useIngredients(Recipe r) {
		if (enoughIngredients(r)) {
			Inventory.coffee -= r.getAmtCoffee();
			Inventory.milk -= r.getAmtMilk();
			Inventory.sugar -= r.getAmtSugar();
			Inventory.chocolate -= r.getAmtChocolate();
			return true;
		} else {
			return false;
		}
	}

	/**
	 * Returns a string describing the current contents of the inventory.
	 * 
	 * @return String
	 */
	public String toString() {
		StringBuffer buf = new StringBuffer();
		buf.append("Coffee: ");
		buf.append(getCoffee());
		buf.append("\n");
		buf.append("Milk: ");
		buf.append(getMilk());
		buf.append("\n");
		buf.append("Sugar: ");
		buf.append(getSugar());
		buf.append("\n");
		buf.append("Chocolate: ");
		buf.append(getChocolate());
		buf.append("\n");
		return buf.toString();
	}
}

----------------------------------------------------------------------------------------------------------------

import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

public class InventoryTest {

    private Inventory inventory;

    @Mock
    private Recipe recipe;

    @Before
    public void setUp() {
        //noinspection deprecation
        MockitoAnnotations.initMocks(this);
        inventory = new Inventory();
    }

    @Test
    public void testGetChocolate() {
        assertEquals(15, inventory.getChocolate());
    }

    @Test
    public void testSetChocolate() {
        inventory.setChocolate(20);
        assertEquals(20, inventory.getChocolate());
    }

    @Test
    public void testAddChocolate() throws InventoryException {
        inventory.addChocolate("5");
        assertEquals(20, inventory.getChocolate());
    }

    @Test(expected = InventoryException.class)
    public void testAddChocolateWithInvalidInput() throws InventoryException {
        inventory.addChocolate("-5");
    }

    @Test
    public void testGetCoffee() {
        assertEquals(15, inventory.getCoffee());
    }

    @Test
    public void testSetCoffee() {
        inventory.setCoffee(20);
        assertEquals(20, inventory.getCoffee());
    }

    @Test
    public void testAddCoffee() throws InventoryException {
        inventory.addCoffee("5");
        assertEquals(20, inventory.getCoffee());
    }

    @Test(expected = InventoryException.class)
    public void testAddCoffeeWithInvalidInput() throws InventoryException {
        inventory.addCoffee("-5");
    }

    @Test
    public void testGetMilk() {
        assertEquals(15, inventory.getMilk());
    }

    @Test
    public void testSetMilk() {
        inventory.setMilk(20);
        assertEquals(20, inventory.getMilk());
    }

    @Test
    public void testAddMilk() throws InventoryException {
        inventory.addMilk("5");
        assertEquals(20, inventory.getMilk());
    }

    @Test(expected = InventoryException.class)
    public void testAddMilkWithInvalidInput() throws InventoryException {
        inventory.addMilk("-5");
    }

    @Test
    public void testGetSugar() {
        assertEquals(15, inventory.getSugar());
    }

    @Test
    public void testSetSugar() {
        inventory.setSugar(20);
        assertEquals(20, inventory.getSugar());
    }

    @Test
    public void testAddSugar() throws InventoryException {
        inventory.addSugar("5");
        assertEquals(20, inventory.getSugar());
    }

    @Test(expected = InventoryException.class)
    public void testAddSugarWithInvalidInput() throws InventoryException {
        inventory.addSugar("-5");
    }

    @Test
    public void testEnoughIngredientsWithEnoughIngredients() throws RecipeException {
        Recipe recipe = new Recipe();
        recipe.setAmtChocolate(String.valueOf(10));
        recipe.setAmtCoffee(String.valueOf(10));
        recipe.setAmtMilk(String.valueOf(10));
        recipe.setAmtSugar(String.valueOf(10));

        assertTrue(inventory.enoughIngredients(recipe));
    }

    @Test
    public void testEnoughIngredientsWithNotEnoughIngredients() throws RecipeException {
        Recipe recipe = new Recipe();
        recipe.setAmtChocolate(String.valueOf(20));
        recipe.setAmtCoffee(String.valueOf(20));
        recipe.setAmtMilk(String.valueOf(20));
        recipe.setAmtSugar(String.valueOf(20));

        assertFalse(inventory.enoughIngredients(recipe));
    }

    @Test
    public void testUseIngredientsWithEnoughIngredients() throws RecipeException {
        Recipe recipe = new Recipe();
        recipe.setAmtChocolate(String.valueOf(10));
        recipe.setAmtCoffee(String.valueOf(10));
        recipe.setAmtMilk(String.valueOf(10));
        recipe.setAmtSugar(String.valueOf(10));

        assertTrue(inventory.useIngredients(recipe));
        assertEquals(5, inventory.getChocolate());
        assertEquals(5, inventory.getCoffee());
        assertEquals(5, inventory.getMilk());
        assertEquals(5, inventory.getSugar());
    }

    @Test
    public void testUseIngredientsWithNotEnoughIngredients() throws RecipeException {
        Recipe recipe = new Recipe();
        recipe.setAmtChocolate(String.valueOf(20));
        recipe.setAmtCoffee(String.valueOf(20));
        recipe.setAmtMilk(String.valueOf(20));
        recipe.setAmtSugar(String.valueOf(20));

        assertFalse(inventory.useIngredients(recipe));
        assertEquals(15, inventory.getChocolate());
        assertEquals(15, inventory.getCoffee());
        assertEquals(15, inventory.getMilk());
        assertEquals(15, inventory.getSugar());
    }

    @Test
    public void testToString() {
        String expectedString = "Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n";
        assertEquals(expectedString, inventory.toString());
    }
}

----------------------------------------------------------------------------------------------------------------

public class RecipeBook {

    /** Array of recipes in coffee maker */
    private final Recipe[] recipeArray;

    /**
     * Default constructor for a RecipeBook.
     */
    public RecipeBook() {
        int NUM_RECIPES = 4;
        recipeArray = new Recipe[NUM_RECIPES];
    }

    /**
     * Returns the recipe array.
     *
     * @param
     * @return Recipe[]
     */
    public synchronized Recipe[] getRecipes() {
        return recipeArray;
    }

    public synchronized boolean addRecipe(Recipe r) {
        // Check that recipe doesn't already exist in array
        boolean exists = false;
        for (Recipe recipe : recipeArray) {
            if (recipe.equals(r)) {
                exists = true;
                break;
            }
        }
        // Assume recipe cannot be added until find an empty
        // spot
        boolean added = false;
        // Check for first empty spot in array
        if (!exists) {
            for (int i = 0; i < recipeArray.length && !added; i++) {
                if (recipeArray[i] == null) {
                    recipeArray[i] = r;
                    added = true;
                }
            }
        }
        return added;
    }

    /**
     * Returns the name of the recipe deleted at the position specified and null if
     * the recipe does not exist.
     *
     * @return String
     */
    public synchronized String deleteRecipe(int recipeToDelete) {
        if (recipeArray[recipeToDelete] != null) {
            String recipeName = recipeArray[recipeToDelete].getName();
            recipeArray[recipeToDelete] = null;
            return recipeName;
        } else {
            return null;
        }
    }

    /**
     * Returns the name of the recipe edited at the position specified and null if
     * the recipe does not exist.
     *
     * @return String
     */
    public synchronized String editRecipe(int recipeToEdit, Recipe newRecipe) {
        if (recipeArray[recipeToEdit] != null) {
            String recipeName = recipeArray[recipeToEdit].getName();
            recipeArray[recipeToEdit] = newRecipe;
            return recipeName;
        } else {
            return null;
        }
    }

}

----------------------------------------------------------------------------------------------------------------
import org.junit.Assert;
import org.junit.Test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;
import org.mockito.Mockito;
import static org.mockito.Mockito.*;


/**
 This class contains JUnit and Mockito for the RecipeBook class.
 */
public class RecipeBookTest {

    @Test
    public void testAddRecipe_MaxRecipes() throws RecipeException {
        // Create a new recipe book
        RecipeBook book = new RecipeBook();

        // Add 4 recipes to the recipe book
        for (int i = 0; i < 4; i++) {
            Recipe recipe = new Recipe();
            recipe.setName("Recipe" + i);
            recipe.setPrice("100");
            recipe.setAmtCoffee("1");
            recipe.setAmtMilk("0");
            recipe.setAmtSugar("1");
            recipe.setAmtChocolate("0");
            book.addRecipe(recipe);
        }

        // Attempt to add a 5th recipe
        Recipe recipe = new Recipe();
        recipe.setName("Recipe5");
        recipe.setPrice("100");
        recipe.setAmtCoffee("1");
        recipe.setAmtMilk("0");
        recipe.setAmtSugar("1");
        recipe.setAmtChocolate("0");
        assertEquals(false, book.addRecipe(recipe));
    }

    @Test
        public void testDeleteRecipe_InvalidIndex() {
            // Create a new recipe book
            RecipeBook book = new RecipeBook();

            // Test deleting a recipe with an invalid index
            assertEquals(null, book.deleteRecipe(-1));
            assertEquals(null,
                    book.deleteRecipe(4));
        }

        @Test
        public void testEditRecipe_InvalidIndex() throws RecipeException {
            // Create a new recipe book
            RecipeBook book = new RecipeBook();

            // Test editing a recipe with an invalid index
            Recipe newRecipe = new Recipe();
            newRecipe.setName("Cappuccino");
            newRecipe.setPrice("150");
            newRecipe.setAmtCoffee("1");
            newRecipe.setAmtMilk("1");
            newRecipe.setAmtSugar("1");
            newRecipe.setAmtChocolate("0");
            assertEquals(null, book.editRecipe(-1, newRecipe));
            assertEquals(null,
                    book.editRecipe(4, newRecipe));
        }



    /**
     * Tests adding a recipe to the recipe book.
     * @throws RecipeException if there is an issue with setting the properties of the recipe
     */
    @Test
    public void testAddRecipe() throws RecipeException {
        // Create a new recipe book and recipe
        RecipeBook book = new RecipeBook();
        Recipe recipe = new Recipe();
        recipe.setName("Espresso");
        recipe.setPrice("100");
        recipe.setAmtCoffee("1");
        recipe.setAmtMilk("0");
        recipe.setAmtSugar("1");
        recipe.setAmtChocolate("0");

        // Add the recipe to the recipe book and check that it was added successfully
        Assert.assertTrue(book.addRecipe(recipe));

        // Check that the recipe has been added to the recipe book
        Recipe[] recipes = book.getRecipes();
        boolean found = false;
        for (Recipe value : recipes) {
            if (value != null && value.equals(recipe)) {
                found = true;
                break;
            }
        }
        Assert.assertTrue(found);
    }

    /**
     * Tests deleting a recipe from the recipe book.
     *
     * @throws RecipeException if there is an issue with setting the properties of the recipe
     */
    @Test
    public void testDeleteRecipe() throws RecipeException {
        // Create a new recipe book and recipe
        RecipeBook book = new RecipeBook();
        Recipe recipe = new Recipe();
        recipe.setName("Espresso");
        recipe.setPrice("100");
        recipe.setAmtCoffee("1");
        recipe.setAmtMilk("0");
        recipe.setAmtSugar("1");
        recipe.setAmtChocolate("0");

        // Add the recipe to the recipe book and check that it was added successfully
        book.addRecipe(recipe);

        // Delete the recipe and check that it was deleted successfully
        assertEquals("Espresso", book.deleteRecipe(0));
        assertEquals(null, book.getRecipes()[0]);
    }

    /**
     * Tests editing a recipe in the recipe book.
     *
     * @throws RecipeException if there is an issue with setting the properties of the recipe
     */
    @Test
    public void testEditRecipe() throws RecipeException {
        // Create a new recipe book and recipe
        RecipeBook book = new RecipeBook();
        Recipe recipe = new Recipe();
        recipe.setName("Espresso");
        recipe.setPrice("100");
        recipe.setAmtCoffee("1");
        recipe.setAmtMilk("0");
        recipe.setAmtSugar("1");
        recipe.setAmtChocolate("0");
        book.addRecipe(recipe);

        // Create a new recipe with updated properties
        Recipe newRecipe = new Recipe();
        newRecipe.setName("Cappuccino");
        newRecipe.setPrice("150");
        newRecipe.setAmtCoffee("1");
        newRecipe.setAmtMilk("1");
        newRecipe.setAmtSugar("1");
        newRecipe.setAmtChocolate("0");

        // Edit the recipe and check that it was edited successfully
        assertEquals("Espresso", book.editRecipe(0, newRecipe));
        assertEquals(newRecipe, book.getRecipes()[0]);
    }

    /**
     * Tests getting the recipes in the recipe book.
     */
    @Test
    public void testGetRecipes() {
        RecipeBook book = new RecipeBook();
        Recipe[] recipes = book.getRecipes();

        // Check that the recipe book contains an empty array of length 4
        assertEquals(4, recipes.length);
        for (Recipe recipe : recipes) {
            assertNull(recipe);
        }
    }
}


----------------------------------------------------------------------------------------------------------------


public class InventoryException extends Exception {

	private static final long serialVersionUID = 1L;

	public InventoryException(String msg) {
		super(msg);
	}

}

----------------------------------------------------------------------------------------------------------------

import org.junit.Test;

import static org.junit.Assert.*;

/**
 * Test the constructor of the {@link InventoryException} class.
 * It tests whether the message passed in the constructor is correctly returned by the getMessage() method.
 */

public class InventoryExceptionTest {

    /**
     * Test case for the constructor of the InventoryException class.
     *  The constructor should create an instance of InventoryException with the specified message.
     */
    @Test
    public void testConstructor() {
        String message = "Test Exception";
        InventoryException exception = new InventoryException(message);
        assertEquals(message, exception.getMessage());
    }
}

----------------------------------------------------------------------------------------------------------------



public class RecipeException extends Exception {

	private static final long serialVersionUID = 1L;

	public RecipeException(String msg) {
		super(msg);
	}

}

----------------------------------------------------------------------------------------------------------------
import org.junit.Test;

import static org.junit.Assert.*;

/**
 * Unit tests for the RecipeException class.
 */
public class RecipeExceptionTest {

    private Object msg;

    /**
     * Tests the constructor and getMessage() method of RecipeException.
     */
    @Test
    public void testConstructorAndGetMessage() {
        String errorMsg = "Test error message";
        RecipeException exception = new RecipeException(errorMsg);
        assertEquals(errorMsg, exception.getMessage());
    }

    /**
     * Tests the default constructor of RecipeException.
     */
    @Test
    public void testDefaultConstructor() {
        // Since msg is an Object, it is initialized to null by default
        RecipeException exception = new RecipeException((String) msg);
        assertNull(exception.getMessage());
    }
}


